{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(gameField, buttonStart, gameScore, messageLose, messageWin, messageStart) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        // eslint-disable-next-line no-console\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.gameField = gameField;\n        this.buttonStart = buttonStart;\n        this.messageLose = messageLose;\n        this.messageWin = messageWin;\n        this.messageStart = messageStart;\n        this.gameScore = gameScore;\n        this.score = 0;\n        this.idle = true;\n        this.playing = false;\n        this.lose = false;\n        this.win = false;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(value) {\n                        return value !== 0;\n                    });\n                    var mergedRow = [];\n                    for(var col = 0; col < newRow.length; col++)if (newRow[col] === newRow[col + 1]) {\n                        var mergedValue = newRow[col] * 2;\n                        mergedRow.push(mergedValue);\n                        _this.score += mergedValue;\n                        boardChanged = true;\n                        col++;\n                    } else mergedRow.push(newRow[col]);\n                    while(mergedRow.length < _this.board[row].length)mergedRow.push(0);\n                    if (JSON.stringify(_this.board[row]) !== JSON.stringify(mergedRow)) {\n                        _this.board[row] = mergedRow;\n                        boardChanged = true;\n                    }\n                };\n                var boardChanged = false;\n                for(var row = 0; row < this.board.length; row++)_loop(row);\n                if (boardChanged) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(value) {\n                        return value !== 0;\n                    }).reverse();\n                    var mergedRow = [];\n                    for(var col = 0; col < newRow.length; col++)if (newRow[col] === newRow[col + 1]) {\n                        var mergedValue = newRow[col] * 2;\n                        mergedRow.push(mergedValue);\n                        _this.score += mergedValue;\n                        boardChanged = true;\n                        col++;\n                    } else mergedRow.push(newRow[col]);\n                    while(mergedRow.length < _this.board[row].length)mergedRow.push(0);\n                    mergedRow.reverse();\n                    if (JSON.stringify(_this.board[row]) !== JSON.stringify(mergedRow)) {\n                        _this.board[row] = mergedRow;\n                        boardChanged = true;\n                    }\n                };\n                var boardChanged = false;\n                for(var row = 0; row < this.board.length; row++)_loop(row);\n                if (boardChanged) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(col) {\n                    var newCol = _this.board.map(function(row) {\n                        return row[col];\n                    }).filter(function(value) {\n                        return value !== 0;\n                    });\n                    var mergedCol = [];\n                    for(var row = 0; row < newCol.length; row++)if (newCol[row] === newCol[row + 1]) {\n                        var mergedValue = newCol[row] * 2;\n                        mergedCol.push(mergedValue);\n                        _this.score += mergedValue;\n                        boardChanged = true;\n                        row++;\n                    } else mergedCol.push(newCol[row]);\n                    while(mergedCol.length < _this.board.length)mergedCol.push(0);\n                    for(var row1 = 0; row1 < _this.board.length; row1++)if (_this.board[row1][col] !== mergedCol[row1]) {\n                        _this.board[row1][col] = mergedCol[row1];\n                        boardChanged = true;\n                    }\n                };\n                var boardChanged = false;\n                for(var col = 0; col < this.board.length; col++)_loop(col);\n                if (boardChanged) this.addRandomTile();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(col) {\n                    var newCol = _this.board.map(function(row) {\n                        return row[col];\n                    }).filter(function(value) {\n                        return value !== 0;\n                    }).reverse();\n                    var mergedCol = [];\n                    for(var row = 0; row < newCol.length; row++)if (row < newCol.length - 1 && newCol[row] === newCol[row + 1]) {\n                        var mergedValue = newCol[row] * 2;\n                        mergedCol.push(mergedValue);\n                        _this.score += mergedValue;\n                        boardChanged = true;\n                        row++;\n                    } else mergedCol.push(newCol[row]);\n                    while(mergedCol.length < _this.board.length)mergedCol.push(0);\n                    mergedCol.reverse();\n                    for(var row1 = 0; row1 < _this.board.length; row1++)if (_this.board[row1][col] !== mergedCol[row1]) {\n                        _this.board[row1][col] = mergedCol[row1];\n                        boardChanged = true;\n                    }\n                };\n                var boardChanged = false;\n                for(var col = 0; col < this.board.length; col++)_loop(col);\n                if (boardChanged) this.addRandomTile();\n            }\n        },\n        {\n            key: \"makeMove\",\n            value: function makeMove() {\n                var _this = this;\n                document.addEventListener(\"keydown\", function(e) {\n                    switch(e.key){\n                        case \"ArrowUp\":\n                            _this.moveUp();\n                            break;\n                        case \"ArrowDown\":\n                            _this.moveDown();\n                            break;\n                        case \"ArrowLeft\":\n                            _this.moveLeft();\n                            break;\n                        case \"ArrowRight\":\n                            _this.moveRight();\n                            break;\n                        default:\n                            break;\n                    }\n                    _this.updateGameField();\n                    _this.getScore();\n                    _this.checkWin();\n                    _this.canMakeMove();\n                });\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                this.gameScore.textContent = this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.idle) return \"idle\";\n                if (this.lose) return \"lose\";\n                if (this.win) return \"win\";\n                if (this.playing) return \"playing\";\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (!this.playing) {\n                    this.addRandomTile();\n                    this.addRandomTile();\n                    this.getState();\n                    this.updateButton(\"restart\");\n                    this.playing = true;\n                    this.idle = false;\n                    this.messageStart.className = \"message message-start hidden\";\n                    this.messageLose.className = \"message message-lose hidden\";\n                    this.messageWin.className = \"message message-win hidden\";\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                if (this.playing) {\n                    this.board = [\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ]\n                    ];\n                    this.score = 0;\n                    this.getScore();\n                    this.updateGameField();\n                    this.updateButton(\"start\");\n                    this.idle = true;\n                    this.playing = false;\n                    this.messageStart.className = \"message message-start\";\n                    this.messageLose.className = \"message message-lose hidden\";\n                    this.messageWin.className = \"message message-win hidden\";\n                }\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < this.board.length; row++){\n                    for(var col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], row1 = _emptyCells_randomIndex.row, col1 = _emptyCells_randomIndex.col;\n                    this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                    this.gameField.rows[row1].cells[col1].textContent = this.board[row1][col1];\n                    this.gameField.rows[row1].cells[col1].className = \"field-cell field-cell--\".concat(this.board[row1][col1]);\n                }\n            }\n        },\n        {\n            key: \"updateButton\",\n            value: function updateButton(state) {\n                if (state === \"start\") {\n                    this.buttonStart.classList.add(\"start\");\n                    this.buttonStart.classList.remove(\"restart\");\n                    this.buttonStart.textContent = \"Start\";\n                } else if (state === \"restart\") {\n                    this.buttonStart.classList.remove(\"start\");\n                    this.buttonStart.classList.add(\"restart\");\n                    this.buttonStart.textContent = \"Restart\";\n                }\n            }\n        },\n        {\n            key: \"updateGameField\",\n            value: function updateGameField() {\n                for(var row = 0; row < this.board.length; row++)for(var col = 0; col < this.board[row].length; col++){\n                    this.gameField.rows[row].cells[col].textContent = this.board[row][col] === 0 ? \"\" : this.board[row][col];\n                    this.gameField.rows[row].cells[col].className = this.board[row][col] === 0 ? \"field-cell\" : \"field-cell field-cell--\".concat(this.board[row][col]);\n                }\n            }\n        },\n        {\n            key: \"canMakeMove\",\n            value: function canMakeMove() {\n                for(var row = 0; row < this.board.length; row++)for(var col = 0; col < this.board[row].length; col++){\n                    if (this.board[row][col] === 0) {\n                        this.lose = false;\n                        return;\n                    }\n                    if (col < this.board[row].length - 1 && this.board[row][col] === this.board[row][col + 1]) {\n                        this.lose = false;\n                        return;\n                    }\n                    if (row < this.board.length - 1 && this.board[row][col] === this.board[row + 1][col]) {\n                        this.lose = false;\n                        return;\n                    }\n                }\n                this.lose = true;\n                this.messageLose.classList.remove(\"hidden\");\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                for(var r = 0; r < this.board.length; r++){\n                    for(var c = 0; c < this.board[r].length; c++)if (this.board[r][c] === 2024) {\n                        this.win = true;\n                        this.messageWin.classList.remove(\"hidden\");\n                    }\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n// Add your own methods here\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\n// Write your code here\nvar $197cd56b15c33885$var$gameField = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$buttonStart = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports($197cd56b15c33885$var$gameField, $197cd56b15c33885$var$buttonStart, $197cd56b15c33885$var$gameScore, $197cd56b15c33885$var$messageLose, $197cd56b15c33885$var$messageWin, $197cd56b15c33885$var$messageStart);\n$197cd56b15c33885$var$buttonStart.addEventListener(\"click\", function() {\n    if (!$197cd56b15c33885$var$game.playing) $197cd56b15c33885$var$game.start();\n    else $197cd56b15c33885$var$game.restart();\n});\n$197cd56b15c33885$var$game.makeMove();\n\n})();\n//# sourceMappingURL=index.b13ce732.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\n\n// Write your code here\n\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst buttonStart = document.querySelector('.start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst game = new Game(\n  gameField,\n  buttonStart,\n  gameScore,\n  messageLose,\n  messageWin,\n  messageStart,\n);\n\nbuttonStart.addEventListener('click', () => {\n  if (!game.playing) {\n    game.start();\n  } else {\n    game.restart();\n  }\n});\n\ngame.makeMove();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the this.board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the this.board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    gameField,\n    buttonStart,\n    gameScore,\n    messageLose,\n    messageWin,\n    messageStart,\n  ) {\n    // eslint-disable-next-line no-console\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.gameField = gameField;\n    this.buttonStart = buttonStart;\n    this.messageLose = messageLose;\n    this.messageWin = messageWin;\n    this.messageStart = messageStart;\n    this.gameScore = gameScore;\n\n    this.score = 0;\n    this.idle = true;\n    this.playing = false;\n    this.lose = false;\n    this.win = false;\n  }\n\n  moveLeft() {\n    let boardChanged = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const newRow = this.board[row].filter((value) => value !== 0);\n      const mergedRow = [];\n\n      for (let col = 0; col < newRow.length; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          const mergedValue = newRow[col] * 2;\n\n          mergedRow.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          col++;\n        } else {\n          mergedRow.push(newRow[col]);\n        }\n      }\n\n      while (mergedRow.length < this.board[row].length) {\n        mergedRow.push(0);\n      }\n\n      if (JSON.stringify(this.board[row]) !== JSON.stringify(mergedRow)) {\n        this.board[row] = mergedRow;\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    let boardChanged = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const newRow = this.board[row].filter((value) => value !== 0).reverse();\n      const mergedRow = [];\n\n      for (let col = 0; col < newRow.length; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          const mergedValue = newRow[col] * 2;\n\n          mergedRow.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          col++;\n        } else {\n          mergedRow.push(newRow[col]);\n        }\n      }\n\n      while (mergedRow.length < this.board[row].length) {\n        mergedRow.push(0);\n      }\n\n      mergedRow.reverse();\n\n      if (JSON.stringify(this.board[row]) !== JSON.stringify(mergedRow)) {\n        this.board[row] = mergedRow;\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    let boardChanged = false;\n\n    for (let col = 0; col < this.board.length; col++) {\n      const newCol = this.board\n        .map((row) => row[col])\n        .filter((value) => value !== 0);\n      const mergedCol = [];\n\n      for (let row = 0; row < newCol.length; row++) {\n        if (newCol[row] === newCol[row + 1]) {\n          const mergedValue = newCol[row] * 2;\n\n          mergedCol.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          row++;\n        } else {\n          mergedCol.push(newCol[row]);\n        }\n      }\n\n      while (mergedCol.length < this.board.length) {\n        mergedCol.push(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== mergedCol[row]) {\n          this.board[row][col] = mergedCol[row];\n          boardChanged = true;\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    let boardChanged = false;\n\n    for (let col = 0; col < this.board.length; col++) {\n      const newCol = this.board\n        .map((row) => row[col])\n        .filter((value) => value !== 0)\n        .reverse();\n      const mergedCol = [];\n\n      for (let row = 0; row < newCol.length; row++) {\n        if (row < newCol.length - 1 && newCol[row] === newCol[row + 1]) {\n          const mergedValue = newCol[row] * 2;\n\n          mergedCol.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          row++;\n        } else {\n          mergedCol.push(newCol[row]);\n        }\n      }\n\n      while (mergedCol.length < this.board.length) {\n        mergedCol.push(0);\n      }\n      mergedCol.reverse();\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== mergedCol[row]) {\n          this.board[row][col] = mergedCol[row];\n          boardChanged = true;\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  makeMove() {\n    document.addEventListener('keydown', (e) => {\n      switch (e.key) {\n        case 'ArrowUp':\n          this.moveUp();\n          break;\n        case 'ArrowDown':\n          this.moveDown();\n          break;\n        case 'ArrowLeft':\n          this.moveLeft();\n          break;\n        case 'ArrowRight':\n          this.moveRight();\n          break;\n        default:\n          break;\n      }\n      this.updateGameField();\n      this.getScore();\n      this.checkWin();\n      this.canMakeMove();\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    this.gameScore.textContent = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.idle) {\n      return 'idle';\n    }\n\n    if (this.lose) {\n      return 'lose';\n    }\n\n    if (this.win) {\n      return 'win';\n    }\n\n    if (this.playing) {\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (!this.playing) {\n      this.addRandomTile();\n      this.addRandomTile();\n\n      this.getState();\n\n      this.updateButton('restart');\n      this.playing = true;\n      this.idle = false;\n      this.messageStart.className = 'message message-start hidden';\n      this.messageLose.className = 'message message-lose hidden';\n      this.messageWin.className = 'message message-win hidden';\n    }\n  }\n\n  restart() {\n    if (this.playing) {\n      this.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n      this.score = 0;\n      this.getScore();\n\n      this.updateGameField();\n\n      this.updateButton('start');\n      this.idle = true;\n      this.playing = false;\n      this.messageStart.className = 'message message-start';\n      this.messageLose.className = 'message message-lose hidden';\n      this.messageWin.className = 'message message-win hidden';\n    }\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n      this.gameField.rows[row].cells[col].textContent = this.board[row][col];\n\n      this.gameField.rows[row].cells[col].className =\n        `field-cell field-cell--${this.board[row][col]}`;\n    }\n  }\n\n  updateButton(state) {\n    if (state === 'start') {\n      this.buttonStart.classList.add('start');\n      this.buttonStart.classList.remove('restart');\n      this.buttonStart.textContent = 'Start';\n    } else if (state === 'restart') {\n      this.buttonStart.classList.remove('start');\n      this.buttonStart.classList.add('restart');\n      this.buttonStart.textContent = 'Restart';\n    }\n  }\n\n  updateGameField() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        this.gameField.rows[row].cells[col].textContent =\n          this.board[row][col] === 0 ? '' : this.board[row][col];\n\n        this.gameField.rows[row].cells[col].className =\n          this.board[row][col] === 0\n            ? 'field-cell'\n            : `field-cell field-cell--${this.board[row][col]}`;\n      }\n    }\n  }\n\n  canMakeMove() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          this.lose = false;\n\n          return;\n        }\n\n        if (\n          col < this.board[row].length - 1 &&\n          this.board[row][col] === this.board[row][col + 1]\n        ) {\n          this.lose = false;\n\n          return;\n        }\n\n        if (\n          row < this.board.length - 1 &&\n          this.board[row][col] === this.board[row + 1][col]\n        ) {\n          this.lose = false;\n\n          return;\n        }\n      }\n    }\n\n    this.lose = true;\n    this.messageLose.classList.remove('hidden');\n  }\n\n  checkWin() {\n    for (let r = 0; r < this.board.length; r++) {\n      for (let c = 0; c < this.board[r].length; c++) {\n        if (this.board[r][c] === 2024) {\n          this.win = true;\n          this.messageWin.classList.remove('hidden');\n        }\n      }\n    }\n  }\n}\n\n// Add your own methods here\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$3d28d7f1aac198f5$exports","$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","protoProps","Game","gameField","buttonStart","gameScore","messageLose","messageWin","messageStart","instance","Constructor","TypeError","board","score","idle","playing","lose","win","key","value","_this","boardChanged","row","_loop","newRow","filter","mergedRow","col","mergedValue","push","JSON","stringify","addRandomTile","reverse","newCol","map","mergedCol","row1","document","addEventListener","e","moveUp","moveDown","moveLeft","moveRight","updateGameField","getScore","checkWin","canMakeMove","textContent","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","getState","updateButton","className","emptyCells","randomIndex","Math","floor","random","_emptyCells_randomIndex","col1","rows","cells","concat","state","classList","add","remove","r","c","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$gameField","querySelector","$197cd56b15c33885$var$gameScore","$197cd56b15c33885$var$buttonStart","$197cd56b15c33885$var$game","restart","start","makeMove"],"version":3,"file":"index.b13ce732.js.map"}