{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the this.board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the this.board will be initialized with the provided\n   * initial state.\n   */ constructor(gameField, buttonStart, gameScore, messageLose, messageWin, messageStart){\n        // eslint-disable-next-line no-console\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.gameField = gameField;\n        this.buttonStart = buttonStart;\n        this.messageLose = messageLose;\n        this.messageWin = messageWin;\n        this.messageStart = messageStart;\n        this.gameScore = gameScore;\n        this.score = 0;\n        this.idle = true;\n        this.playing = false;\n        this.lose = false;\n        this.win = false;\n    }\n    moveLeft() {\n        let boardChanged = false;\n        for(let row = 0; row < this.board.length; row++){\n            const newRow = this.board[row].filter((value)=>value !== 0);\n            const mergedRow = [];\n            for(let col = 0; col < newRow.length; col++)if (newRow[col] === newRow[col + 1]) {\n                const mergedValue = newRow[col] * 2;\n                mergedRow.push(mergedValue);\n                this.score += mergedValue;\n                boardChanged = true;\n                col++;\n            } else mergedRow.push(newRow[col]);\n            while(mergedRow.length < this.board[row].length)mergedRow.push(0);\n            if (JSON.stringify(this.board[row]) !== JSON.stringify(mergedRow)) {\n                this.board[row] = mergedRow;\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) this.addRandomTile();\n    }\n    moveRight() {\n        let boardChanged = false;\n        for(let row = 0; row < this.board.length; row++){\n            const newRow = this.board[row].filter((value)=>value !== 0).reverse();\n            const mergedRow = [];\n            for(let col = 0; col < newRow.length; col++)if (newRow[col] === newRow[col + 1]) {\n                const mergedValue = newRow[col] * 2;\n                mergedRow.push(mergedValue);\n                this.score += mergedValue;\n                boardChanged = true;\n                col++;\n            } else mergedRow.push(newRow[col]);\n            while(mergedRow.length < this.board[row].length)mergedRow.push(0);\n            mergedRow.reverse();\n            if (JSON.stringify(this.board[row]) !== JSON.stringify(mergedRow)) {\n                this.board[row] = mergedRow;\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) this.addRandomTile();\n    }\n    moveUp() {\n        let boardChanged = false;\n        for(let col = 0; col < this.board.length; col++){\n            const newCol = this.board.map((row)=>row[col]).filter((value)=>value !== 0);\n            const mergedCol = [];\n            for(let row = 0; row < newCol.length; row++)if (newCol[row] === newCol[row + 1]) {\n                const mergedValue = newCol[row] * 2;\n                mergedCol.push(mergedValue);\n                this.score += mergedValue;\n                boardChanged = true;\n                row++;\n            } else mergedCol.push(newCol[row]);\n            while(mergedCol.length < this.board.length)mergedCol.push(0);\n            for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== mergedCol[row]) {\n                this.board[row][col] = mergedCol[row];\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) this.addRandomTile();\n    }\n    moveDown() {\n        let boardChanged = false;\n        for(let col = 0; col < this.board.length; col++){\n            const newCol = this.board.map((row)=>row[col]).filter((value)=>value !== 0).reverse();\n            const mergedCol = [];\n            for(let row = 0; row < newCol.length; row++)if (row < newCol.length - 1 && newCol[row] === newCol[row + 1]) {\n                const mergedValue = newCol[row] * 2;\n                mergedCol.push(mergedValue);\n                this.score += mergedValue;\n                boardChanged = true;\n                row++;\n            } else mergedCol.push(newCol[row]);\n            while(mergedCol.length < this.board.length)mergedCol.push(0);\n            mergedCol.reverse();\n            for(let row = 0; row < this.board.length; row++)if (this.board[row][col] !== mergedCol[row]) {\n                this.board[row][col] = mergedCol[row];\n                boardChanged = true;\n            }\n        }\n        if (boardChanged) this.addRandomTile();\n    }\n    makeMove() {\n        document.addEventListener(\"keydown\", (e)=>{\n            switch(e.key){\n                case \"ArrowUp\":\n                    this.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    this.moveDown();\n                    break;\n                case \"ArrowLeft\":\n                    this.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    this.moveRight();\n                    break;\n                default:\n                    break;\n            }\n            this.updateGameField();\n            this.getScore();\n            this.checkWin();\n            this.canMakeMove();\n        });\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        this.gameScore.textContent = this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.idle) return \"idle\";\n        if (this.lose) return \"lose\";\n        if (this.win) return \"win\";\n        if (this.playing) return \"playing\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (!this.playing) {\n            this.addRandomTile();\n            this.addRandomTile();\n            this.getState();\n            this.updateButton(\"restart\");\n            this.playing = true;\n            this.idle = false;\n            this.messageStart.className = \"message message-start hidden\";\n            this.messageLose.className = \"message message-lose hidden\";\n            this.messageWin.className = \"message message-win hidden\";\n        }\n    }\n    restart() {\n        if (this.playing) {\n            this.board = [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ];\n            this.score = 0;\n            this.getScore();\n            this.updateGameField();\n            this.updateButton(\"start\");\n            this.idle = true;\n            this.playing = false;\n            this.messageStart.className = \"message message-start\";\n            this.messageLose.className = \"message message-lose hidden\";\n            this.messageWin.className = \"message message-win hidden\";\n        }\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.board.length; row++){\n            for(let col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n            this.gameField.rows[row].cells[col].textContent = this.board[row][col];\n            this.gameField.rows[row].cells[col].className = `field-cell field-cell--${this.board[row][col]}`;\n        }\n    }\n    updateButton(state) {\n        if (state === \"start\") {\n            this.buttonStart.classList.add(\"start\");\n            this.buttonStart.classList.remove(\"restart\");\n            this.buttonStart.textContent = \"Start\";\n        } else if (state === \"restart\") {\n            this.buttonStart.classList.remove(\"start\");\n            this.buttonStart.classList.add(\"restart\");\n            this.buttonStart.textContent = \"Restart\";\n        }\n    }\n    updateGameField() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            this.gameField.rows[row].cells[col].textContent = this.board[row][col] === 0 ? \"\" : this.board[row][col];\n            this.gameField.rows[row].cells[col].className = this.board[row][col] === 0 ? \"field-cell\" : `field-cell field-cell--${this.board[row][col]}`;\n        }\n    }\n    canMakeMove() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] === 0) {\n                this.lose = false;\n                return;\n            }\n            if (col < this.board[row].length - 1 && this.board[row][col] === this.board[row][col + 1]) {\n                this.lose = false;\n                return;\n            }\n            if (row < this.board.length - 1 && this.board[row][col] === this.board[row + 1][col]) {\n                this.lose = false;\n                return;\n            }\n        }\n        this.lose = true;\n        this.messageLose.classList.remove(\"hidden\");\n    }\n    checkWin() {\n        for(let r = 0; r < this.board.length; r++){\n            for(let c = 0; c < this.board[r].length; c++)if (this.board[r][c] === 2024) {\n                this.win = true;\n                this.messageWin.classList.remove(\"hidden\");\n            }\n        }\n    }\n}\n// Add your own methods here\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n// Write your code here\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$gameField, $09e991522ca7e64e$var$buttonStart, $09e991522ca7e64e$var$gameScore, $09e991522ca7e64e$var$messageLose, $09e991522ca7e64e$var$messageWin, $09e991522ca7e64e$var$messageStart);\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    if (!$09e991522ca7e64e$var$game.playing) $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n});\n$09e991522ca7e64e$var$game.makeMove();\n\n\n//# sourceMappingURL=index.37b77a7a.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\n\n// Write your code here\n\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst buttonStart = document.querySelector('.start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst game = new Game(\n  gameField,\n  buttonStart,\n  gameScore,\n  messageLose,\n  messageWin,\n  messageStart,\n);\n\nbuttonStart.addEventListener('click', () => {\n  if (!game.playing) {\n    game.start();\n  } else {\n    game.restart();\n  }\n});\n\ngame.makeMove();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the this.board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the this.board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    gameField,\n    buttonStart,\n    gameScore,\n    messageLose,\n    messageWin,\n    messageStart,\n  ) {\n    // eslint-disable-next-line no-console\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.gameField = gameField;\n    this.buttonStart = buttonStart;\n    this.messageLose = messageLose;\n    this.messageWin = messageWin;\n    this.messageStart = messageStart;\n    this.gameScore = gameScore;\n\n    this.score = 0;\n    this.idle = true;\n    this.playing = false;\n    this.lose = false;\n    this.win = false;\n  }\n\n  moveLeft() {\n    let boardChanged = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const newRow = this.board[row].filter((value) => value !== 0);\n      const mergedRow = [];\n\n      for (let col = 0; col < newRow.length; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          const mergedValue = newRow[col] * 2;\n\n          mergedRow.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          col++;\n        } else {\n          mergedRow.push(newRow[col]);\n        }\n      }\n\n      while (mergedRow.length < this.board[row].length) {\n        mergedRow.push(0);\n      }\n\n      if (JSON.stringify(this.board[row]) !== JSON.stringify(mergedRow)) {\n        this.board[row] = mergedRow;\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  moveRight() {\n    let boardChanged = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const newRow = this.board[row].filter((value) => value !== 0).reverse();\n      const mergedRow = [];\n\n      for (let col = 0; col < newRow.length; col++) {\n        if (newRow[col] === newRow[col + 1]) {\n          const mergedValue = newRow[col] * 2;\n\n          mergedRow.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          col++;\n        } else {\n          mergedRow.push(newRow[col]);\n        }\n      }\n\n      while (mergedRow.length < this.board[row].length) {\n        mergedRow.push(0);\n      }\n\n      mergedRow.reverse();\n\n      if (JSON.stringify(this.board[row]) !== JSON.stringify(mergedRow)) {\n        this.board[row] = mergedRow;\n        boardChanged = true;\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  moveUp() {\n    let boardChanged = false;\n\n    for (let col = 0; col < this.board.length; col++) {\n      const newCol = this.board\n        .map((row) => row[col])\n        .filter((value) => value !== 0);\n      const mergedCol = [];\n\n      for (let row = 0; row < newCol.length; row++) {\n        if (newCol[row] === newCol[row + 1]) {\n          const mergedValue = newCol[row] * 2;\n\n          mergedCol.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          row++;\n        } else {\n          mergedCol.push(newCol[row]);\n        }\n      }\n\n      while (mergedCol.length < this.board.length) {\n        mergedCol.push(0);\n      }\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== mergedCol[row]) {\n          this.board[row][col] = mergedCol[row];\n          boardChanged = true;\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  moveDown() {\n    let boardChanged = false;\n\n    for (let col = 0; col < this.board.length; col++) {\n      const newCol = this.board\n        .map((row) => row[col])\n        .filter((value) => value !== 0)\n        .reverse();\n      const mergedCol = [];\n\n      for (let row = 0; row < newCol.length; row++) {\n        if (row < newCol.length - 1 && newCol[row] === newCol[row + 1]) {\n          const mergedValue = newCol[row] * 2;\n\n          mergedCol.push(mergedValue);\n          this.score += mergedValue;\n          boardChanged = true;\n          row++;\n        } else {\n          mergedCol.push(newCol[row]);\n        }\n      }\n\n      while (mergedCol.length < this.board.length) {\n        mergedCol.push(0);\n      }\n      mergedCol.reverse();\n\n      for (let row = 0; row < this.board.length; row++) {\n        if (this.board[row][col] !== mergedCol[row]) {\n          this.board[row][col] = mergedCol[row];\n          boardChanged = true;\n        }\n      }\n    }\n\n    if (boardChanged) {\n      this.addRandomTile();\n    }\n  }\n\n  makeMove() {\n    document.addEventListener('keydown', (e) => {\n      switch (e.key) {\n        case 'ArrowUp':\n          this.moveUp();\n          break;\n        case 'ArrowDown':\n          this.moveDown();\n          break;\n        case 'ArrowLeft':\n          this.moveLeft();\n          break;\n        case 'ArrowRight':\n          this.moveRight();\n          break;\n        default:\n          break;\n      }\n      this.updateGameField();\n      this.getScore();\n      this.checkWin();\n      this.canMakeMove();\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    this.gameScore.textContent = this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.idle) {\n      return 'idle';\n    }\n\n    if (this.lose) {\n      return 'lose';\n    }\n\n    if (this.win) {\n      return 'win';\n    }\n\n    if (this.playing) {\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (!this.playing) {\n      this.addRandomTile();\n      this.addRandomTile();\n\n      this.getState();\n\n      this.updateButton('restart');\n      this.playing = true;\n      this.idle = false;\n      this.messageStart.className = 'message message-start hidden';\n      this.messageLose.className = 'message message-lose hidden';\n      this.messageWin.className = 'message message-win hidden';\n    }\n  }\n\n  restart() {\n    if (this.playing) {\n      this.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n      this.score = 0;\n      this.getScore();\n\n      this.updateGameField();\n\n      this.updateButton('start');\n      this.idle = true;\n      this.playing = false;\n      this.messageStart.className = 'message message-start';\n      this.messageLose.className = 'message message-lose hidden';\n      this.messageWin.className = 'message message-win hidden';\n    }\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n      this.gameField.rows[row].cells[col].textContent = this.board[row][col];\n\n      this.gameField.rows[row].cells[col].className =\n        `field-cell field-cell--${this.board[row][col]}`;\n    }\n  }\n\n  updateButton(state) {\n    if (state === 'start') {\n      this.buttonStart.classList.add('start');\n      this.buttonStart.classList.remove('restart');\n      this.buttonStart.textContent = 'Start';\n    } else if (state === 'restart') {\n      this.buttonStart.classList.remove('start');\n      this.buttonStart.classList.add('restart');\n      this.buttonStart.textContent = 'Restart';\n    }\n  }\n\n  updateGameField() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        this.gameField.rows[row].cells[col].textContent =\n          this.board[row][col] === 0 ? '' : this.board[row][col];\n\n        this.gameField.rows[row].cells[col].className =\n          this.board[row][col] === 0\n            ? 'field-cell'\n            : `field-cell field-cell--${this.board[row][col]}`;\n      }\n    }\n  }\n\n  canMakeMove() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          this.lose = false;\n\n          return;\n        }\n\n        if (\n          col < this.board[row].length - 1 &&\n          this.board[row][col] === this.board[row][col + 1]\n        ) {\n          this.lose = false;\n\n          return;\n        }\n\n        if (\n          row < this.board.length - 1 &&\n          this.board[row][col] === this.board[row + 1][col]\n        ) {\n          this.lose = false;\n\n          return;\n        }\n      }\n    }\n\n    this.lose = true;\n    this.messageLose.classList.remove('hidden');\n  }\n\n  checkWin() {\n    for (let r = 0; r < this.board.length; r++) {\n      for (let c = 0; c < this.board[r].length; c++) {\n        if (this.board[r][c] === 2024) {\n          this.win = true;\n          this.messageWin.classList.remove('hidden');\n        }\n      }\n    }\n  }\n}\n\n// Add your own methods here\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","constructor","gameField","buttonStart","gameScore","messageLose","messageWin","messageStart","board","score","idle","playing","lose","win","moveLeft","boardChanged","row","length","newRow","filter","value","mergedRow","col","mergedValue","push","JSON","stringify","addRandomTile","moveRight","reverse","moveUp","newCol","map","mergedCol","moveDown","makeMove","document","addEventListener","e","key","updateGameField","getScore","checkWin","canMakeMove","textContent","getState","getStatus","start","updateButton","className","restart","emptyCells","randomIndex","Math","floor","random","rows","cells","state","classList","add","remove","r","c","$09e991522ca7e64e$var$gameField","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$game"],"version":3,"file":"index.37b77a7a.js.map"}